webservice {
}

akka {
  http {
    server {
    }
  }
}

system {
  io {
  }

  input-read-limits {
  }

  abort {
    scan-frequency: 30 seconds
    cache {
      enabled: true
      concurrency: 1
      ttl: 20 minutes
      size: 100000
    }
  }
}

workflow-options {
  default {
  }
}

call-caching {
  enabled = false
  invalidate-bad-cache-results = true
}

google {
}

docker {
  hash-lookup {
    enabled=false
  }
}

engine {
  filesystems {
    local {
    }
  }
}

languages {
  WDL {
    versions {
      "draft-2" {
      }
      "1.0" {
      }
    }
  }
  CWL {
    versions {
      "v1.0" {
      }
    }
  }
}

backend {
  default = local
  
  providers {
    local {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      config {
        concurrent-job-limit = 20

        run-in-background = true

        runtime-attributes = """
        String? docker
        String? docker_user
        String cacheLocation = "/data/cqs/softwares/singularity"       
        """

        # Submit string when there is no "docker" runtime attribute.
        submit = "/usr/bin/env bash ${script}"

        # Submit string when there is a "docker" runtime attribute.
        submit-docker = """
        # Check singularity image
        docker_basename=$(basename ${docker})
        docker_subbed=$(sed -e 's/[^A-Za-z0-9._-]/./g' <<< $docker_basename)
        image=${cacheLocation}/$docker_subbed.sif

        if [ ! -f "$image" ]; then
          echo $image not exists, please run following command before running the pipeline
          echo singularity pull $image docker://${docker}
          exit 125
        else
          echo $image already exists, great
        fi

        #export mybinds='/nobackup,/data,/tmp'
        export mybinds='/nobackup,/data'

        if [[ -e /panfs ]]; then
          export mybinds=$mybinds,/panfs
        fi

        if [[ -e /dors ]]; then
          export mybinds=$mybinds,/dors
        fi

        if [[ -e /mnt ]]; then
          export mybinds=$mybinds,/mnt
        fi

        if [[ -e /workspace ]]; then
          export mybinds=$mybinds,/workspace
        fi

        singularity exec -c -e --bind $mybinds,${cwd}:${docker_cwd} $image ${job_shell} ${script}
        """

        # Root directory where Cromwell writes job results.  This directory must be
        # visible and writeable by the Cromwell process as well as the jobs that Cromwell
        # launches.
        root = "cromwell-executions"

        # Root directory where Cromwell writes job results in the container. This value
        # can be used to specify where the execution folder is mounted in the container.
        # it is used for the construction of the docker_cwd string in the submit-docker
        # value above.
        dockerRoot = "/cromwell-executions"

        # File system configuration.
        filesystems {

          # For SFS backends, the "local" configuration specifies how files are handled.
          local {

            # Try to hard link (ln), then soft-link (ln -s), and if both fail, then copy the files.
            localization: [
              "soft-link", "hard-link", "cached-copy", "copy"
            ]
            # An experimental localization strategy called "cached-copy" is also available for SFS backends.
            # This will copy a file to a cache and then hard-link from the cache. It will copy the file to the cache again
            # when the maximum number of hardlinks for a file is reached. The maximum number of hardlinks can be set with:
            # max-hardlinks: 950

            # Call caching strategies
            caching {
              # When copying a cached result, what type of file duplication should occur. Attempted in the order listed below:
              duplication-strategy: [
                "soft-link", "hard-link", "cached-copy", "copy"
              ]

              # Possible values: file, path, path+modtime
              # "file" will compute an md5 hash of the file content.
              # "path" will compute an md5 hash of the file path. This strategy will only be effective if the duplication-strategy (above) is set to "soft-link",
              # in order to allow for the original file path to be hashed.
              # "path+modtime" will compute an md5 hash of the file path and the last modified time. The same conditions as for "path" apply here.
              # Default: file
              hashing-strategy: "file"

              # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
              # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
              check-sibling-md5: false
            }
          }
        }

        # The defaults for runtime attributes if not provided.
        default-runtime-attributes {
          failOnStderr: false
          continueOnReturnCode: 0
        }
      }
    }
  }
}

services {
  MetadataService {
  }

  Instrumentation {
  }
  HealthMonitor {
    config {
    }
  }
  LoadController {
    config {
    }
  }
}

database {
  migration {
  }
}
